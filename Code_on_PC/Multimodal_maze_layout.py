import numpy as np
import torch
import torch.nn as nn
import time

class MazeBase:
    def __init__(self):
        self.special_variables = {"no_hole": False, "empty": False}
        self.max_reward = np.max(self.rewards)
        self.reward_image_multiplier = int(255 / self.max_reward)
        self.rewards *= self.reward_image_multiplier

        self.empty_full_img = np.stack((self.holes, self.walls, self.rewards), axis=2)
        
        N = self.subgrid_size
        self.holes_padded = np.zeros((3*N, 3*N), dtype=np.uint8)
        self.walls_padded = np.zeros((3*N, 3*N), dtype=np.uint8)
        self.rewards_padded = np.zeros((3*N, 3*N), dtype=np.uint8)
        self.holes_padded[N:2*N, N:2*N] = self.holes
        self.walls_padded[N:2*N, N:2*N] = self.walls
        self.rewards_padded[N:2*N, N:2*N] = self.rewards

    @staticmethod
    def pos_to_layout(position): 
        x0,y0 = position
        x1 = (x0+1)/2
        y1 = 1 - (y0+1)/2
        pos1 = np.array([x1,y1])
        return pos1
    
    def get_rectangles(self):
        holes = self.find_rectangles(self.holes)
        walls = self.find_rectangles(self.walls)
        return holes, walls
    
    def get_box_reward(self, position):
        x,y = self.pos_to_layout(position) # position assumed in [0,1]^2
        #assert ((0 <= x <= 1) and (0 <= y <= 1)), f"position not in [0,1]^2, x,y: {x,y}"
        N = self.subgrid_size
        ind_x_full = max(0,min(self.rewards.shape[0]-1,int(x*N)))
        ind_y_full = max(0,min(self.rewards.shape[1]-1,int(y*N)))
        reward_box = self.rewards[ind_x_full, ind_y_full]
        return reward_box / self.reward_image_multiplier
    
    def get_plot_img(self, position):
        if position is None:
            return self.empty_full_img
        x,y = self.pos_to_layout(position) # position assumed in [0,1]^2
        #assert ((0 <= x <= 1) and (0 <= y <= 1)), f"position not in [0,1]^2, x,y: {x,y}"
        N = self.subgrid_size
        ind_x_full = max(0,min(self.rewards.shape[0]-1,int(x*N)))
        ind_y_full = max(0,min(self.rewards.shape[1]-1,int(y*N)))
        img = np.stack((self.holes, self.walls, self.rewards), axis=2)
        img[ind_x_full, ind_y_full, :] = [255]*3
        return img
    
    def get_surrounding_img(self, position):
        x,y = self.pos_to_layout(position) # position assumed in [0,1]^2
        #assert ((0 <= x <= 1) and (0 <= y <= 1)), f"position not in [0,1]^2, x,y: {x,y}"
        M = self.surrounding_img_size
        N = self.subgrid_size
        ind_x_full = max(0,min(self.rewards.shape[0]-1,int(x*N)))
        ind_y_full = max(0,min(self.rewards.shape[1]-1,int(y*N)))
        halfsize = int((M-1)/2)
        start_x, end_x = int(N + ind_x_full - halfsize), int(N + ind_x_full + halfsize + 1)
        start_y, end_y = int(N + ind_y_full - halfsize), int(N + ind_y_full + halfsize + 1)
        assert (end_x-start_x == end_y-start_y == M), "something went wrong..."

        channel_holes =   self.holes_padded[start_x:end_x, start_y:end_y]
        channel_walls =   self.walls_padded[start_x:end_x, start_y:end_y]
        channel_rewards = self.rewards_padded[start_x:end_x, start_y:end_y] # needs some additional postprocessing
        img = np.stack((channel_holes, channel_walls, channel_rewards), axis=2)
        return img

    @ staticmethod
    def find_rectangles(grid):
        """Finds the largest possible rectangles in a binary grid."""
        height, width = grid.shape
        visited = np.zeros_like(grid, dtype=bool)
        rectangles = []

        def find_max_rectangle(x, y):
            """Find the largest rectangle starting at (x, y)."""
            max_w, max_h = 1, 1
            
            # Expand width
            while y + max_w < width and np.all(grid[x:x+max_h, y + max_w]) and not visited[x, y + max_w]:
                max_w += 1
            
            # Expand height
            while x + max_h < height and np.all(grid[x + max_h, y:y + max_w]) and not visited[x + max_h, y]:
                max_h += 1
            
            # Mark as visited
            visited[x:x + max_h, y:y + max_w] = True
            return (x, y, max_h, max_w)

        for i in range(height):
            for j in range(width):
                if grid[i, j] == 255 and not visited[i, j]:
                    rect = find_max_rectangle(i, j)
                    rectangles.append(rect)
        return rectangles

class Maze_layout(MazeBase):
    def __init__(self, foresight_squares = 3):
        self.foresight_squares = foresight_squares
        # specific layout definition below, replace with load from somewhere...
        self.wall_thickness = 1
        self.square_size = 3
        self.surrounding_img_size = 1 + (self.square_size + self.wall_thickness) * (1 + 2 * self.foresight_squares)
        self.grid_size = 10
        self.subgrid_size = self.wall_thickness + self.grid_size * (self.square_size + self.wall_thickness)

        self.loaded_model = MLP(hidden_dim=200)
        self.loaded_model.load_state_dict(torch.load('mlp_model_maze_v1_200d.pth'))
        self.loaded_model.eval()
        
        self.holes = 255 * np.array([
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  1,1,1,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  1,1,1,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  1,1,1,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            
            [0,  0,0,0,  0,  1,1,1,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  1,1,1,  0,  0,0,0,  0,  1,1,1,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  1,1,1,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  1,1,1,  0,  0,0,0,  0,  1,1,1,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  1,1,1,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  1,1,1,  0,  0,0,0,  0,  1,1,1,  0,  0,0,0,  0],
            
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  1,1,1,  0,  0,0,0,  0,  1,1,1,  0,  0,0,0,  0,  1,1,1,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  1,1,1,  0,  0,0,0,  0,  1,1,1,  0,  0,0,0,  0,  1,1,1,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  1,1,1,  0,  0,0,0,  0,  1,1,1,  0,  0,0,0,  0,  1,1,1,  0],
            
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            
            [0,  0,0,0,  0,  1,1,1,  0,  0,0,0,  0,  0,0,0,  0,  1,1,1,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  1,1,1,  0,  0,0,0,  0,  0,0,0,  0,  1,1,1,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  1,1,1,  0,  0,0,0,  0,  0,0,0,  0,  1,1,1,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            
            [0,  0,0,0,  0,  1,1,1,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  1,1,1,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  1,1,1,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  1,1,1,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  1,1,1,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  1,1,1,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  1,1,1,  0,  1,1,1,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  1,1,1,  0,  1,1,1,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  1,1,1,  0,  1,1,1,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            
            [0,  0,0,0,  0,  1,1,1,  0,  1,1,1,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  1,1,1,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  1,1,1,  0,  1,1,1,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  1,1,1,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  1,1,1,  0,  1,1,1,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  1,1,1,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  1,1,1,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  1,1,1,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  1,1,1,  0],
            
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0]
            ], dtype=np.uint8)
        
        
        self.walls = 255 * np.array([
            [1,  1,1,1,  1,  1,1,1,  1,  1,1,1,  1,  1,1,1,  1,  1,1,1,  1,  1,1,1,  1,  1,1,1,  1,  1,1,1,  1,  1,1,1,  1,  1,1,1,  1],
            
            [1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1],
            [1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1],
            [1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1],
            
            [1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  1,1,1,  1,  1,1,1,  1,  1,1,1,  1,  0,0,0,  0,  0,0,0,  1],
            
            [1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  1],
            [1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  1],
            [1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  1],
            
            [1,  0,0,0,  0,  0,0,0,  1,  1,1,1,  1,  1,1,1,  1,  1,1,1,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  1],
            
            [1,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  1],
            [1,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  1],
            [1,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  1],
            
            [1,  1,1,1,  0,  0,0,0,  1,  0,0,0,  1,  1,1,1,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  1],
            
            [1,  0,0,0,  0,  0,0,0,  1,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  1],
            [1,  0,0,0,  0,  0,0,0,  1,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  1],
            [1,  0,0,0,  0,  0,0,0,  1,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  1],
            
            [1,  0,0,0,  0,  0,0,0,  1,  0,0,0,  1,  0,0,0,  0,  0,0,0,  1,  1,1,1,  1,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  1],
            
            [1,  0,0,0,  0,  0,0,0,  1,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  1],
            [1,  0,0,0,  0,  0,0,0,  1,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  1],
            [1,  0,0,0,  0,  0,0,0,  1,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  1],
            
            [1,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  1,  1,1,1,  1,  0,0,0,  1,  1,1,1,  0,  0,0,0,  1],
            
            [1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  1,  0,0,0,  0,  0,0,0,  1],
            [1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  1,  0,0,0,  0,  0,0,0,  1],
            [1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  1,  0,0,0,  0,  0,0,0,  1],
            
            [1,  0,0,0,  1,  0,0,0,  1,  1,1,1,  1,  1,1,1,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  1],
            
            [1,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  1],
            [1,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  1],
            [1,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  1],
            
            [1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  1,  1,1,1,  1,  1,1,1,  1,  0,0,0,  0,  1,1,1,  1],
            
            [1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  1,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  1],
            [1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  1,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  1],
            [1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  1,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  1],
            
            [1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  1,1,1,  0,  0,0,0,  1],
            
            [1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  1,  0,0,0,  1,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  1],
            [1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  1,  0,0,0,  1,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  1],
            [1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  1,  0,0,0,  1,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  1],
            
            [1,  1,1,1,  1,  1,1,1,  1,  1,1,1,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1],
            
            [1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1],
            [1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1],
            [1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1],
            
            [1,  1,1,1,  1,  1,1,1,  1,  1,1,1,  1,  1,1,1,  1,  1,1,1,  1,  1,1,1,  1,  1,1,1,  1,  1,1,1,  1,  1,1,1,  1,  1,1,1,  1]
            ], dtype=np.uint8)

    
        self.rewards = np.array([
            [0,   0, 0, 0,   0,   0, 0, 0,   0,   0, 0, 0,   0,   0, 0, 0,   0,   0, 0, 0,   0,   0, 0, 0,   0,   0, 0, 0,   0,   0, 0, 0,   0,   0, 0, 0,   0,   0, 0, 0,   0],
            
            [0,  40,40,40,  39,  39,39,39,  38,  38,38,38,  38,   0, 0, 0,  34,  34,34,34,  33,  33,33,33,  32,  32,32,32,  31,  31,31,31,  30,  30,30,30,  29,  29,29,29,   0],
            [0,  40,40,40,  39,  39,39,39,  38,  38,38,38,  38,   0, 0, 0,  34,  34,34,34,  33,  33,33,33,  32,  32,32,32,  31,  31,31,31,  30,  30,30,30,  29,  29,29,29,   0],
            [0,  40,40,40,  39,  39,39,39,  38,  38,38,38,  38,   0, 0, 0,  34,  34,34,34,  33,  33,33,33,  32,  32,32,32,  31,  31,31,31,  30,  30,30,30,  29,  29,29,29,   0],
            
            [0,  40,40,40,  39,  39,39,39,  37,  37,37,37,  36,  36,36,36,  34,  34,34,34,   0,   0, 0, 0,   0,   0, 0, 0,   0,   0, 0, 0,   0,  30,30,30,  28,  28,28,28,   0],
        
            [0,  41,41,41,  41,   0, 0, 0,  37,  37,37,37,  36,  36,36,36,  35,  35,35,35,   0,  65,65,65,  65,   0, 0, 0,  64,  64,64,64,   0,   0, 0, 0,  28,  28,28,28,   0],
            [0,  41,41,41,  41,   0, 0, 0,  37,  37,37,37,  36,  36,36,36,  35,  35,35,35,   0,  65,65,65,  65,   0, 0, 0,  64,  64,64,64,   0,   0, 0, 0,  28,  28,28,28,   0],
            [0,  41,41,41,  41,   0, 0, 0,  37,  37,37,37,  36,  36,36,36,  35,  35,35,35,   0,  65,65,65,  65,   0, 0, 0,  64,  64,64,64,   0,   0, 0, 0,  28,  28,28,28,   0],
            
            [0,  41,41,41,  41,  43,43,43,   0,   0, 0, 0,   0,   0, 0, 0,   0,   0, 0, 0,   0,  65,65,65,  64,  64,64,64,  64,  64,64,64,   0,  26,26,26,  26,  27,27,27,   0],
            
            [0,  42,42,42,  42,  43,43,43,   0,  74,74,74,  74,  75,75,75,   0,  66,66,66,  65,  65,65,65,  64,  64,64,64,  64,  64,64,64,   0,  26,26,26,  26,  27,27,27,   0],
            [0,  42,42,42,  42,  43,43,43,   0,  74,74,74,  74,  75,75,75,   0,  66,66,66,  65,  65,65,65,  64,  64,64,64,  64,  64,64,64,   0,  26,26,26,  26,  27,27,27,   0],
            [0,  42,42,42,  42,  43,43,43,   0,  74,74,74,  74,  75,75,75,   0,  66,66,66,  65,  65,65,65,  64,  64,64,64,  64,  64,64,64,   0,  26,26,26,  26,  27,27,27,   0],
            
            [0,   0, 0, 0,  42,  43,43,43,   0,  73,73,73,   0,   0, 0, 0,   0,  66,66,66,  65,  65,65,65,  63,  63,63,63,  63,  64,64,64,   0,  25,25,25,  25,  27,27,27,   0],
            
            [0,  45,45,45,  44,  44,44,44,   0,  73,73,73,   0,  68,68,68,  67,  67,67,67,  67,   0, 0, 0,  63,  63,63,63,  63,   0, 0, 0,   0,  25,25,25,  25,   0, 0, 0,   0],
            [0,  45,45,45,  44,  44,44,44,   0,  73,73,73,   0,  68,68,68,  67,  67,67,67,  67,   0, 0, 0,  63,  63,63,63,  63,   0, 0, 0,   0,  25,25,25,  25,   0, 0, 0,   0],
            [0,  45,45,45,  44,  44,44,44,   0,  73,73,73,   0,  68,68,68,  67,  67,67,67,  67,   0, 0, 0,  63,  63,63,63,  63,   0, 0, 0,   0,  25,25,25,  25,   0, 0, 0,   0],
            
            [0,  45,45,45,  44,  44,44,44,   0,  72,72,72,   0,  68,68,68,  67,  67,67,67,   0,   0, 0, 0,   0,  62,62,62,  61,  61,61,61,   0,  24,24,24,  23,  23,23,23,   0],
            
            [0,  46,46,46,  46,   0, 0, 0,   0,  72,72,72,   0,  69,69,69,  69,   0, 0, 0,  56,  56,56,56,   0,  62,62,62,  61,  61,61,61,   0,  24,24,24,  23,  23,23,23,   0],
            [0,  46,46,46,  46,   0, 0, 0,   0,  72,72,72,   0,  69,69,69,  69,   0, 0, 0,  56,  56,56,56,   0,  62,62,62,  61,  61,61,61,   0,  24,24,24,  23,  23,23,23,   0],
            [0,  46,46,46,  46,   0, 0, 0,   0,  72,72,72,   0,  69,69,69,  69,   0, 0, 0,  56,  56,56,56,   0,  62,62,62,  61,  61,61,61,   0,  24,24,24,  23,  23,23,23,   0],
            
            [0,  46,46,46,  46,   0, 0, 0,   0,  71,71,71,  69,  69,69,69,   0,  55,55,55,  55,  56,56,56,   0,   0, 0, 0,   0,  60,60,60,   0,   0, 0, 0,  21,  22,22,22,   0],
            
            [0,  47,47,47,  47,   0, 0, 0,  71,  71,71,71,  70,  70,70,70,   0,  55,55,55,  55,  56,56,56,  56,  57,57,57,   0,  60,60,60,   0,  21,21,21,  21,  22,22,22,   0],
            [0,  47,47,47,  47,   0, 0, 0,  71,  71,71,71,  70,  70,70,70,   0,  55,55,55,  55,  56,56,56,  56,  57,57,57,   0,  60,60,60,   0,  21,21,21,  21,  22,22,22,   0],
            [0,  47,47,47,  47,   0, 0, 0,  71,  71,71,71,  70,  70,70,70,   0,  55,55,55,  55,  56,56,56,  56,  57,57,57,   0,  60,60,60,   0,  21,21,21,  21,  22,22,22,   0],
            
            [0,  47,47,47,   0,  51,51,51,   0,   0, 0, 0,   0,   0, 0, 0,   0,  54,54,54,  54,  56,56,56,  56,  57,57,57,  57,  59,59,59,   0,  20,20,20,  20,  21,21,21,   0],
            
            [0,  48,48,48,   0,  51,51,51,  51,  52,52,52,  52,  53,53,53,  53,  54,54,54,  54,   0, 0, 0,  58,  58,58,58,  58,  59,59,59,   0,  20,20,20,  20,  21,21,21,   0],
            [0,  48,48,48,   0,  51,51,51,  51,  52,52,52,  52,  53,53,53,  53,  54,54,54,  54,   0, 0, 0,  58,  58,58,58,  58,  59,59,59,   0,  20,20,20,  20,  21,21,21,   0],
            [0,  48,48,48,   0,  51,51,51,  51,  52,52,52,  52,  53,53,53,  53,  54,54,54,  54,   0, 0, 0,  58,  58,58,58,  58,  59,59,59,   0,  20,20,20,  20,  21,21,21,   0],
            
            [0,  48,48,48,  48,  50,50,50,  50,  51,51,51,  51,  53,53,53,  53,  54,54,54,   0,  10,10,10,   0,   0, 0, 0,   0,   0, 0, 0,   0,  19,19,19,  18,   0, 0, 0,   0],
            
            [0,  49,49,49,  49,  50,50,50,  50,  51,51,51,   0,   0, 0, 0,   0,   0, 0, 0,   0,  10,10,10,  10,  11,11,11,  11,  12,12,12,   0,  19,19,19,  18,  18,18,18,   0],
            [0,  49,49,49,  49,  50,50,50,  50,  51,51,51,   0,   0, 0, 0,   0,   0, 0, 0,   0,  10,10,10,  10,  11,11,11,  11,  12,12,12,   0,  19,19,19,  18,  18,18,18,   0],
            [0,  49,49,49,  49,  50,50,50,  50,  51,51,51,   0,   0, 0, 0,   0,   0, 0, 0,   0,  10,10,10,  10,  11,11,11,  11,  12,12,12,   0,  19,19,19,  18,  18,18,18,   0],
            
            [0,  49,49,49,  49,  50,50,50,  50,  51,51,51,   0,   5, 5, 5,   5,   6, 6, 6,   0,   9, 9, 9,   9,  11,11,11,  11,  12,12,12,   0,   0, 0, 0,  16,  17,17,17,   0],
            
            [0,  49,49,49,  49,   0, 0, 0,   0,   0, 0, 0,   0,   5, 5, 5,   5,   6, 6, 6,   0,   9, 9, 9,   0,   0, 0, 0,  13,  13,13,13,   0,  16,16,16,  16,  17,17,17,   0],
            [0,  49,49,49,  49,   0, 0, 0,   0,   0, 0, 0,   0,   5, 5, 5,   5,   6, 6, 6,   0,   9, 9, 9,   0,   0, 0, 0,  13,  13,13,13,   0,  16,16,16,  16,  17,17,17,   0],
            [0,  49,49,49,  49,   0, 0, 0,   0,   0, 0, 0,   0,   5, 5, 5,   5,   6, 6, 6,   0,   9, 9, 9,   0,   0, 0, 0,  13,  13,13,13,   0,  16,16,16,  16,  17,17,17,   0],
            
            [0,   0, 0, 0,   0,   0, 0, 0,   0,   0, 0, 0,   0,   4, 4, 4,   4,   6, 6, 6,   6,   8, 8, 8,   0,  14,14,14,  13,  13,13,13,  13,  15,15,15,  15,  17,17,17,   0],
            
            [0,   1, 1, 1,   1,   2, 2, 2,   2,   3, 3, 3,   3,   4, 4, 4,   0,   7, 7, 7,   7,   8, 8, 8,   0,  14,14,14,  14,  14,14,14,  14,  15,15,15,  15,   0, 0, 0,   0],
            [0,   1, 1, 1,   1,   2, 2, 2,   2,   3, 3, 3,   3,   4, 4, 4,   0,   7, 7, 7,   7,   8, 8, 8,   0,  14,14,14,  14,  14,14,14,  14,  15,15,15,  15,   0, 0, 0,   0],
            [0,   1, 1, 1,   1,   2, 2, 2,   2,   3, 3, 3,   3,   4, 4, 4,   0,   7, 7, 7,   7,   8, 8, 8,   0,  14,14,14,  14,  14,14,14,  14,  15,15,15,  15,   0, 0, 0,   0],
            
            [0,   0, 0, 0,   0,   0, 0, 0,   0,   0, 0, 0,   0,   0, 0, 0,   0,   0, 0, 0,   0,   0, 0, 0,   0,   0, 0, 0,   0,   0, 0, 0,   0,   0, 0, 0,   0,   0, 0, 0,   0]
            ], dtype=np.uint8)
    
        super().__init__()
        
    def get_surrounding_img_by_index(self, i, j):
        M = self.surrounding_img_size
        N = self.subgrid_size
        halfsize = int((M-1)/2)
        start_x, end_x = int(N + i - halfsize), int(N + i + halfsize + 1)
        start_y, end_y = int(N + j - halfsize), int(N + j + halfsize + 1)
        assert (end_x-start_x == end_y-start_y == M), "something went wrong..."
        channel_holes =   self.holes_padded[start_x:end_x, start_y:end_y]
        channel_walls =   self.walls_padded[start_x:end_x, start_y:end_y]
        channel_rewards = self.rewards_padded[start_x:end_x, start_y:end_y] # needs some additional postprocessing
        img = np.stack((channel_holes, channel_walls, channel_rewards), axis=2)
        return img
    
    def get_embedded_img(self, position):
        img = self.get_surrounding_img(position)
        with torch.no_grad(): # takes 0.3ms when running on CUDA, so not an optimization priority. But could be pre-calculated
            # Convert numpy to torch tensor
            x = torch.from_numpy(img).float() / 255
            x = x.unsqueeze(0)
            
            # Flatten input
            batch_size = x.size(0)
            x = x.view(batch_size, -1)

            # Apply the first layer and activation
            x = self.loaded_model.fc1(x)
            x = self.loaded_model.act(x)

            # Convert back to numpy
            x = x.squeeze(0)
            return x.numpy(force=True)

class Maze_layout2(MazeBase):
    def __init__(self, foresight_squares = 3):
        self.foresight_squares = foresight_squares
        # specific layout definition below, replace with load from somewhere...
        self.wall_thickness = 1
        self.square_size = 3
        self.surrounding_img_size = 1 + (self.square_size + self.wall_thickness) * (1 + 2 * self.foresight_squares)
        self.grid_size = 10
        self.subgrid_size = self.wall_thickness + self.grid_size * (self.square_size + self.wall_thickness)

        self.loaded_model = MLP(hidden_dim=200)
        self.loaded_model.load_state_dict(torch.load('mlp_model_maze_v1_200d.pth'))
        self.loaded_model.eval()

        self.holes = 255 * np.array([
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0]
        ])

        self.walls = 255 * np.array([
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0]
        ])

        self.rewards = np.array([
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],
            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0],

            [0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0]
        ])

        super().__init__()

class Maze_layout_empty(MazeBase):
    def __init__(self, foresight_squares = 3):
        self.foresight_squares = foresight_squares
        # specific layout definition below, replace with load from somewhere...
        self.wall_thickness = 1
        self.square_size = 3
        self.surrounding_img_size = 1 + (self.square_size + self.wall_thickness) * (1 + 2 * self.foresight_squares)
        self.grid_size = 10
        self.subgrid_size = self.wall_thickness + self.grid_size * (self.square_size + self.wall_thickness)
        
        self.holes = 255 * np.zeros((41,41), dtype=np.uint8)
        self.walls = 255 * np.zeros((41,41), dtype=np.uint8)
        self.walls[0,:] = 255
        self.walls[-1,:] = 255
        self.walls[:,0] = 255
        self.walls[:,-1] = 255
        self.rewards = 255 * np.ones((41,41), dtype=np.uint8)
        super().__init__()

class Maze_layout_nohole(MazeBase):
    def __init__(self, foresight_squares = 3):
        self.foresight_squares = foresight_squares
        # specific layout definition below, replace with load from somewhere...
        self.wall_thickness = 1
        self.square_size = 3
        self.surrounding_img_size = 1 + (self.square_size + self.wall_thickness) * (1 + 2 * self.foresight_squares)
        self.grid_size = 10
        self.subgrid_size = self.wall_thickness + self.grid_size * (self.square_size + self.wall_thickness)
        
        self.holes = 255 * np.zeros((41,41), dtype=np.uint8)
        
        self.walls = 255 * np.array([
            [1,  1,1,1,  1,  1,1,1,  1,  1,1,1,  1,  1,1,1,  1,  1,1,1,  1,  1,1,1,  1,  1,1,1,  1,  1,1,1,  1,  1,1,1,  1,  1,1,1,  1],
            
            [1,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1],
            [1,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1],
            [1,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1],
            
            [1,  0,0,0,  1,  0,0,0,  1,  0,0,0,  1,  1,1,1,  1,  1,1,1,  1,  0,0,0,  1,  0,0,0,  1,  1,1,1,  1,  1,1,1,  1,  0,0,0,  1],
            
            [1,  0,0,0,  1,  0,0,0,  1,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1],
            [1,  0,0,0,  1,  0,0,0,  1,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1],
            [1,  0,0,0,  1,  0,0,0,  1,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1],
            
            [1,  0,0,0,  1,  0,0,0,  1,  0,0,0,  1,  0,0,0,  1,  1,1,1,  1,  1,1,1,  1,  0,0,0,  1,  0,0,0,  1,  1,1,1,  1,  1,1,1,  1],
            
            [1,  0,0,0,  1,  0,0,0,  1,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1],
            [1,  0,0,0,  1,  0,0,0,  1,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1],
            [1,  0,0,0,  1,  0,0,0,  1,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1],
            
            [1,  0,0,0,  1,  0,0,0,  1,  0,0,0,  1,  1,1,1,  1,  1,1,1,  1,  1,1,1,  1,  1,1,1,  1,  1,1,1,  1,  1,1,1,  1,  0,0,0,  1],
            
            [1,  0,0,0,  1,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1],
            [1,  0,0,0,  1,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1],
            [1,  0,0,0,  1,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1],
            
            [1,  0,0,0,  1,  1,1,1,  1,  1,1,1,  1,  0,0,0,  1,  1,1,1,  1,  1,1,1,  1,  0,0,0,  1,  0,0,0,  1,  1,1,1,  1,  1,1,1,  1],
            
            [1,  0,0,0,  1,  0,0,0,  0,  0,0,0,  1,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  1,  0,0,0,  0,  0,0,0,  1],
            [1,  0,0,0,  1,  0,0,0,  0,  0,0,0,  1,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  1,  0,0,0,  0,  0,0,0,  1],
            [1,  0,0,0,  1,  0,0,0,  0,  0,0,0,  1,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  1,  0,0,0,  0,  0,0,0,  1],
            
            [1,  0,0,0,  1,  0,0,0,  1,  0,0,0,  1,  1,1,1,  1,  0,0,0,  1,  1,1,1,  1,  1,1,1,  1,  0,0,0,  1,  0,0,0,  1,  0,0,0,  1],
            
            [1,  0,0,0,  1,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  1,  0,0,0,  1],
            [1,  0,0,0,  1,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  1,  0,0,0,  1],
            [1,  0,0,0,  1,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  1,  0,0,0,  1],
            
            [1,  0,0,0,  1,  0,0,0,  1,  1,1,1,  1,  1,1,1,  1,  1,1,1,  1,  0,0,0,  1,  1,1,1,  1,  1,1,1,  1,  0,0,0,  1,  0,0,0,  1],
            
            [1,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  1],
            [1,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  1],
            [1,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  1],
            
            [1,  0,0,0,  1,  1,1,1,  1,  1,1,1,  1,  1,1,1,  1,  1,1,1,  1,  0,0,0,  1,  0,0,0,  1,  1,1,1,  1,  1,1,1,  1,  0,0,0,  1],
            
            [1,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  1,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1],
            [1,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  1,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1],
            [1,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  1,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1],
            
            [1,  0,0,0,  1,  0,0,0,  1,  1,1,1,  1,  1,1,1,  1,  0,0,0,  1,  1,1,1,  1,  0,0,0,  1,  0,0,0,  1,  1,1,1,  1,  1,1,1,  1],
            
            [1,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1],
            [1,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1],
            [1,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1],
            
            [1,  1,1,1,  1,  1,1,1,  1,  0,0,0,  1,  0,0,0,  1,  1,1,1,  1,  1,1,1,  1,  1,1,1,  1,  1,1,1,  1,  1,1,1,  1,  0,0,0,  1],
            
            [1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1],
            [1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1],
            [1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  0,  0,0,0,  1],
            
            [1,  1,1,1,  1,  1,1,1,  1,  1,1,1,  1,  1,1,1,  1,  1,1,1,  1,  1,1,1,  1,  1,1,1,  1,  1,1,1,  1,  1,1,1,  1,  1,1,1,  1]
            ], dtype=np.uint8)

        self.rewards = np.array([
            [0,   0, 0, 0,   0,   0, 0, 0,   0,   0, 0, 0,   0,   0, 0, 0,   0,   0, 0, 0,   0,   0, 0, 0,   0,   0, 0, 0,   0,   0, 0, 0,   0,   0, 0, 0,   0,   0, 0, 0,   0],
            
            [0,  44,44,44,  44,  45,45,45,   0,  52,52,52,  52,  53,53,53,  53,  54,54,54,  54,  55,55,55,   0,  64,64,64,  64,  65,65,65,  65,  66,66,66,  66,  67,67,67,   0],
            [0,  44,44,44,  44,  45,45,45,   0,  52,52,52,  52,  53,53,53,  53,  54,54,54,  54,  55,55,55,   0,  64,64,64,  64,  65,65,65,  65,  66,66,66,  66,  67,67,67,   0],
            [0,  44,44,44,  44,  45,45,45,   0,  52,52,52,  52,  53,53,53,  53,  54,54,54,  54,  55,55,55,   0,  64,64,64,  64,  65,65,65,  65,  66,66,66,  66,  67,67,67,   0],

            [0,  43,43,43,   0,  45,45,45,   0,  51,51,51,   0,   0, 0, 0,   0,   0, 0, 0,   0,  55,55,55,   0,  63,63,63,   0,   0, 0, 0,   0,   0, 0, 0,   0,  67,67,67,   0],
            
            [0,  43,43,43,   0,  46,46,46,   0,  51,51,51,   0,  58,58,58,  57,  57,57,57,  56,  56,56,56,   0,  63,63,63,   0,  70,70,70,  69,  69,69,69,  68,  68,68,68,   0],
            [0,  43,43,43,   0,  46,46,46,   0,  51,51,51,   0,  58,58,58,  57,  57,57,57,  56,  56,56,56,   0,  63,63,63,   0,  70,70,70,  69,  69,69,69,  68,  68,68,68,   0],
            [0,  43,43,43,   0,  46,46,46,   0,  51,51,51,   0,  58,58,58,  57,  57,57,57,  56,  56,56,56,   0,  63,63,63,   0,  70,70,70,  69,  69,69,69,  68,  68,68,68,   0],

            [0,  42,42,42,   0,  46,46,46,   0,  50,50,50,   0,  58,58,58,   0,   0, 0, 0,   0,   0, 0, 0,   0,  62,62,62,   0,  70,70,70,   0,   0, 0, 0,   0,   0, 0, 0,   0],
            
            [0,  42,42,42,   0,  47,47,47,   0,  50,50,50,   0,  59,59,59,  59,  60,60,60,  60,  61,61,61,  61,  62,62,62,   0,  71,71,71,  71,  72,72,72,  72,  73,73,73,   0],
            [0,  42,42,42,   0,  47,47,47,   0,  50,50,50,   0,  59,59,59,  59,  60,60,60,  60,  61,61,61,  61,  62,62,62,   0,  71,71,71,  71,  72,72,72,  72,  73,73,73,   0],
            [0,  42,42,42,   0,  47,47,47,   0,  50,50,50,   0,  59,59,59,  59,  60,60,60,  60,  61,61,61,  61,  62,62,62,   0,  71,71,71,  71,  72,72,72,  72,  73,73,73,   0],

            [0,  41,41,41,   0,  47,47,47,   0,  49,49,49,   0,   0, 0, 0,   0,   0, 0, 0,   0,   0, 0, 0,   0,   0, 0, 0,   0,   0, 0, 0,   0,   0, 0, 0,   0,  73,73,73,   0],
            
            [0,  41,41,41,   0,  48,48,48,  48,  49,49,49,   0,  98,98,98,  97,  97,97,97,  96,  96,96,96,  95,  95,95,95,   0,  76,76,76,  75,  75,75,75,  74,  74,74,74,   0],
            [0,  41,41,41,   0,  48,48,48,  48,  49,49,49,   0,  98,98,98,  97,  97,97,97,  96,  96,96,96,  95,  95,95,95,   0,  76,76,76,  75,  75,75,75,  74,  74,74,74,   0],
            [0,  41,41,41,   0,  48,48,48,  48,  49,49,49,   0,  98,98,98,  97,  97,97,97,  96,  96,96,96,  95,  95,95,95,   0,  76,76,76,  75,  75,75,75,  74,  74,74,74,   0],

            [0,  40,40,40,   0,   0, 0, 0,   0,   0, 0, 0,   0,  98,98,98,   0,   0, 0, 0,   0,   0, 0, 0,   0,  94,94,94,   0,  76,76,76,   0,   0, 0, 0,   0,   0, 0, 0,   0],
            
            [0,  40,40,40,   0,  87,87,87,  87,  88,88,88,   0,  99,99,99,   0,  92,92,92,  92,  93,93,93,  93,  94,94,94,   0,  77,77,77,   0,  22,22,22,  21,  21,21,21,   0],
            [0,  40,40,40,   0,  87,87,87,  87,  88,88,88,   0,  99,99,99,   0,  92,92,92,  92,  93,93,93,  93,  94,94,94,   0,  77,77,77,   0,  22,22,22,  21,  21,21,21,   0],
            [0,  40,40,40,   0,  87,87,87,  87,  88,88,88,   0,  99,99,99,   0,  92,92,92,  92,  93,93,93,  93,  94,94,94,   0,  77,77,77,   0,  22,22,22,  21,  21,21,21,   0],

            [0,  39,39,39,   0,  86,86,86,   0,  88,88,88,   0,   0, 0, 0,   0,  91,91,91,   0,   0, 0, 0,   0,   0, 0, 0,   0,  77,77,77,   0,  22,22,22,   0,  20,20,20,   0],
            
            [0,  39,39,39,   0,  86,86,86,   0,  89,89,89,  89,  90,90,90,  90,  91,91,91,   0,  80,80,80,  79,  79,79,79,  78,  78,78,78,   0,  23,23,23,   0,  20,20,20,   0],
            [0,  39,39,39,   0,  86,86,86,   0,  89,89,89,  89,  90,90,90,  90,  91,91,91,   0,  80,80,80,  79,  79,79,79,  78,  78,78,78,   0,  23,23,23,   0,  20,20,20,   0],
            [0,  39,39,39,   0,  86,86,86,   0,  89,89,89,  89,  90,90,90,  90,  91,91,91,   0,  80,80,80,  79,  79,79,79,  78,  78,78,78,   0,  23,23,23,   0,  20,20,20,   0],

            [0,  38,38,38,   0,  85,85,85,   0,   0, 0, 0,   0,   0, 0, 0,   0,   0, 0, 0,   0,  80,80,80,   0,   0, 0, 0,   0,   0, 0, 0,   0,  23,23,23,   0,  19,19,19,   0],
            
            [0,  38,38,38,   0,  85,85,85,  84,  84,84,84,  83,  83,83,83,  82,  82,82,82,  81,  81,81,81,   0,  26,26,26,  25,  25,25,25,  24,  24,24,24,   0,  19,19,19,   0],
            [0,  38,38,38,   0,  85,85,85,  84,  84,84,84,  83,  83,83,83,  82,  82,82,82,  81,  81,81,81,   0,  26,26,26,  25,  25,25,25,  24,  24,24,24,   0,  19,19,19,   0],
            [0,  38,38,38,   0,  85,85,85,  84,  84,84,84,  83,  83,83,83,  82,  82,82,82,  81,  81,81,81,   0,  26,26,26,  25,  25,25,25,  24,  24,24,24,   0,  19,19,19,   0],

            [0,  37,37,37,   0,   0, 0, 0,   0,   0, 0, 0,   0,   0, 0, 0,   0,   0, 0, 0,   0,  81,81,81,   0,  26,26,26,   0,   0, 0, 0,   0,   0, 0, 0,   0,  18,18,18,   0],
            
            [0,  37,37,37,   0,  34,34,34,  33,  33,33,33,  32,  32,32,32,  31,  31,31,31,   0,  81,81,81,   0,  27,27,27,   0,  16,16,16,  16,  17,17,17,  17,  18,18,18,   0],
            [0,  37,37,37,   0,  34,34,34,  33,  33,33,33,  32,  32,32,32,  31,  31,31,31,   0,  81,81,81,   0,  27,27,27,   0,  16,16,16,  16,  17,17,17,  17,  18,18,18,   0],
            [0,  37,37,37,   0,  34,34,34,  33,  33,33,33,  32,  32,32,32,  31,  31,31,31,   0,  81,81,81,   0,  27,27,27,   0,  16,16,16,  16,  17,17,17,  17,  18,18,18,   0],

            [0,  36,36,36,   0,  34,34,34,   0,   0, 0, 0,   0,   0, 0, 0,   0,  30,30,30,   0,   0, 0, 0,   0,  27,27,27,   0,  15,15,15,   0,   0, 0, 0,   0,   0, 0, 0,   0],
            
            [0,  36,36,36,  35,  35,35,35,   0,   4, 4, 4,   4,   5, 5, 5,   0,  30,30,30,  29,  29,29,29,  28,  28,28,28,   0,  15,15,15,  14,  14,14,14,  13,  13,13,13,   0],
            [0,  36,36,36,  35,  35,35,35,   0,   4, 4, 4,   4,   5, 5, 5,   0,  30,30,30,  29,  29,29,29,  28,  28,28,28,   0,  15,15,15,  14,  14,14,14,  13,  13,13,13,   0],
            [0,  36,36,36,  35,  35,35,35,   0,   4, 4, 4,   4,   5, 5, 5,   0,  30,30,30,  29,  29,29,29,  28,  28,28,28,   0,  15,15,15,  14,  14,14,14,  13,  13,13,13,   0],

            [0,   0, 0, 0,   0,   0, 0, 0,   0,   3, 3, 3,   0,   5, 5, 5,   0,   0, 0, 0,   0,   0, 0, 0,   0,   0, 0, 0,   0,   0, 0, 0,   0,   0, 0, 0,   0,  12,12,12,   0],
            
            [0,   1, 1, 1,   1,   2, 2, 2,   2,   3, 3, 3,   0,   6, 6, 6,   6,   7, 7, 7,   7,   8, 8, 8,   8,   9, 9, 9,   9,  10,10,10,  10,  11,11,11,  11,  12,12,12,   0],
            [0,   1, 1, 1,   1,   2, 2, 2,   2,   3, 3, 3,   0,   6, 6, 6,   6,   7, 7, 7,   7,   8, 8, 8,   8,   9, 9, 9,   9,  10,10,10,  10,  11,11,11,  11,  12,12,12,   0],
            [0,   1, 1, 1,   1,   2, 2, 2,   2,   3, 3, 3,   0,   6, 6, 6,   6,   7, 7, 7,   7,   8, 8, 8,   8,   9, 9, 9,   9,  10,10,10,  10,  11,11,11,  11,  12,12,12,   0],

            [0,   0, 0, 0,   0,   0, 0, 0,   0,   0, 0, 0,   0,   0, 0, 0,   0,   0, 0, 0,   0,   0, 0, 0,   0,   0, 0, 0,   0,   0, 0, 0,   0,   0, 0, 0,   0,   0, 0, 0,   0]
            ], dtype=np.uint8)
        super().__init__()
        self.special_variables["no_hole"] = True

class MLP(nn.Module):
    def __init__(self, hidden_dim):
        super(MLP, self).__init__()
        self.input_dim = 3 * 29 * 29
        self.fc1 = nn.Linear(self.input_dim, hidden_dim)
        self.act = nn.Tanh()
        self.fc2 = nn.Linear(hidden_dim, self.input_dim)

    def forward(self, x):
        batch_size = x.size(0)
        x = x.view(batch_size, -1)
        x = self.fc1(x)
        x = self.act(x)
        x = self.fc2(x)
        x = x.view(batch_size, 3, 29, 29)
        return x
    
    def generate(self, x):
        with torch.no_grad():
            x = self.forward(x)
            # Apply sigmoid to channels 0 and 1
            x[:, :2, :, :] = torch.sigmoid(x[:, :2, :, :])
            # Clamp channel 2 to [0, 1]
            x[:, 2, :, :] = torch.clamp(x[:, 2, :, :], 0, 1)
            return x

if __name__ == "__main__": # Usage example
    import matplotlib.pyplot as plt
    l = Maze_layout()
    print(f"AAA {l.surrounding_img_size}")
    l.get_surrounding_img([0.2,0.6])
    img = np.stack((l.holes, l.walls, l.rewards), axis=2)
    plt.imshow(img)

    
    rects = l.find_rectangles(l.walls)
    print(rects)
    for x, y, h, w in rects:
        print(f"Rectangle at ({x},{y}) with height {h} and width {w}")

    plt.show()

    positions = np.random.rand(5,2)
    positions[0] = [0,0]
    for i in range(5):
        pos = positions[i]
        print(f"pos: {pos}")
        reward_box = l.get_box_reward(pos)
        print(f"reward_box: {reward_box}")
        img = l.get_surrounding_img(pos)
        plt.imshow(img)
        plt.show()